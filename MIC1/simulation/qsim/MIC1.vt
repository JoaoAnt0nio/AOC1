// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/01/2025 18:07:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FULL_ADDER_1bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FULL_ADDER_1bit_vlg_sample_tst(
	A,
	B,
	CIN,
	EN,
	sampler_tx
);
input  A;
input  B;
input  CIN;
input  EN;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or CIN or EN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FULL_ADDER_1bit_vlg_check_tst (
	COUT,
	O,
	sampler_rx
);
input  COUT;
input  O;
input sampler_rx;

reg  COUT_expected;
reg  O_expected;

reg  COUT_prev;
reg  O_prev;

reg  COUT_expected_prev;

reg  last_COUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	COUT_prev = COUT;
	O_prev = O;
end

// update expected /o prevs

always @(trigger)
begin
	COUT_expected_prev = COUT_expected;
end



// expected COUT
initial
begin
	COUT_expected = 1'bX;
end 
// generate trigger
always @(COUT_expected or COUT or O_expected or O)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected COUT = %b | expected O = %b | ",COUT_expected_prev,O_expected_prev);
	$display("| real COUT = %b | real O = %b | ",COUT_prev,O_prev);
`endif
	if (
		( COUT_expected_prev !== 1'bx ) && ( COUT_prev !== COUT_expected_prev )
		&& ((COUT_expected_prev !== last_COUT_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUT_expected_prev);
		$display ("     Real value = %b", COUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_COUT_exp = COUT_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FULL_ADDER_1bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg CIN;
reg EN;
// wires                                               
wire COUT;
wire O;

wire sampler;                             

// assign statements (if any)                          
FULL_ADDER_1bit i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.CIN(CIN),
	.COUT(COUT),
	.EN(EN),
	.O(O)
);

// A
initial
begin
	A = 1'b1;
end 

// B
initial
begin
	B = 1'b1;
end 

// CIN
initial
begin
	CIN = 1'b0;
	CIN = #250000 1'b1;
	CIN = #500000 1'b0;
end 

// EN
initial
begin
	EN = 1'b1;
end 

FULL_ADDER_1bit_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.CIN(CIN),
	.EN(EN),
	.sampler_tx(sampler)
);

FULL_ADDER_1bit_vlg_check_tst tb_out(
	.COUT(COUT),
	.O(O),
	.sampler_rx(sampler)
);
endmodule

